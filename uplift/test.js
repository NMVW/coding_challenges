<body class=""><div id="__next" data-reactroot=""><div class="Layout_root__vNJgM"><div class="Header_root__yD_oh"><div class="Container_root__FEEeO Header_body___BA8p"><a class="Header_logoLink__RPkny" href="/"><div class=""><div class="Image_container__3yrl0"><span style="box-sizing:border-box;display:inline-block;overflow:hidden;width:initial;height:initial;background:none;opacity:1;border:0;margin:0;padding:0;position:relative;max-width:100%"><span style="box-sizing:border-box;display:block;width:initial;height:initial;background:none;opacity:1;border:0;margin:0;padding:0;max-width:100%"><img style="display:block;max-width:100%;width:initial;height:initial;background:none;opacity:1;border:0;margin:0;padding:0" alt="" aria-hidden="true" src="data:image/svg+xml,%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20version=%271.1%27%20width=%27126.4%27%20height=%2740%27/%3e"></span><img alt="Uplift.ltd Logo" src="/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fuplift-logo-inverse.6771c264.png&amp;w=256&amp;q=75" decoding="async" data-nimg="intrinsic" style="position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%" srcset="/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fuplift-logo-inverse.6771c264.png&amp;w=128&amp;q=75 1x, /_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fuplift-logo-inverse.6771c264.png&amp;w=256&amp;q=75 2x"></span></div></div></a><button class="Button_root__oUSH3 Button_blue__seg3a Header_menuToggle__M_G1I" type="button">Menu</button><ul class="Header_list__Y1Poe"><li class="lg:mr-6"><a class="Header_link__My_v_" href="/">Home</a></li><li class="lg:mr-6"><a class="Header_link__My_v_" href="/blog/">Blog</a></li><li class="lg:mr-6"><a class="Header_link__My_v_ Header_activeLink__ysrc9" aria-current="page" href="/careers/">Careers</a></li><li class=""><a class="Header_link__My_v_" href="/contact-us/">Contact Us</a></li></ul></div></div><div class="Layout_body__oMw0b FadeIn_enterDone__mFSJ9"><div class="Container_root__FEEeO Assessment_pageContainer__1BCmB"><h1 class="Heading_root__SyOvZ PageTitle_root__xHrSJ">Uplift Assessment</h1><div class=""><form action="#"><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">odd_numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>]</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="1val-id">Reverse this list without using builtin functions<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="1val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.0.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">def my_reverse_fn(input_list):
    """Reverses a list without using a built-in function such as `reverse` or `reversed`."""
    reversed_list = []
    ii = len(input_list) - 1
    ri = 0

    # step down input list while stepping up reversed list
    while (ii &gt;= 0):
      reversed_list[ri] = input_list[ii]
      ii -= 1
      ri += 1

    return reversed_list</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_reverse_fn</span>(<span class="hljs-params">input_list</span>):
    <span class="hljs-string">"""Reverses a list without using a built-in function such as `reverse` or `reversed`."""</span>
    reversed_list = []
    ii = <span class="hljs-built_in">len</span>(input_list) - <span class="hljs-number">1</span>
    ri = <span class="hljs-number">0</span>

    <span class="hljs-comment"># step down input list while stepping up reversed list</span>
    <span class="hljs-keyword">while</span> (ii &gt;= <span class="hljs-number">0</span>):
      reversed_list[ri] = input_list[ii]
      ii -= <span class="hljs-number">1</span>
      ri += <span class="hljs-number">1</span>

    <span class="hljs-keyword">return</span> reversed_list<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">x = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What's the value of x?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="2val-id-0" name="answers.1.value" value="<map at 0x107c28a01>"><label class="Form_label__q7ww1" for="2val-id-0">&lt;map at 0x107c28a01&gt;</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="2val-id-1" name="answers.1.value" value="[0, 2, 4, 6, 8]"><label class="Form_label__q7ww1" for="2val-id-1">[0, 2, 4, 6, 8]</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="2val-id-2" name="answers.1.value" value="(0, 2, 4, 6, 8)"><label class="Form_label__q7ww1" for="2val-id-2">(0, 2, 4, 6, 8)</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="2val-id-3" name="answers.1.value" value="TypeError: 'range' is not iterable"><label class="Form_label__q7ww1" for="2val-id-3">TypeError: 'range' is not iterable</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">users = [
    { <span class="hljs-string">"name"</span>: <span class="hljs-string">"Bill"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">37</span>, <span class="hljs-string">"country"</span>: <span class="hljs-string">"USA"</span> },
    { <span class="hljs-string">"name"</span>: <span class="hljs-string">"Susan"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">21</span>, <span class="hljs-string">"country"</span>: <span class="hljs-string">"Canada"</span> },
    { <span class="hljs-string">"name"</span>: <span class="hljs-string">"Glenda"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">61</span>, <span class="hljs-string">"country"</span>: <span class="hljs-string">"Britain"</span> },
    { <span class="hljs-string">"name"</span>: <span class="hljs-string">"Astro"</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">12</span>, <span class="hljs-string">"country"</span>: <span class="hljs-string">"USA"</span> },
]</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="3val-id">Get a list of user names from the list for users in the USA<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="3val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.2.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">user_names = [user["name"] for user in users if user["country"] == "USA"]</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px">user_names = [user[<span class="hljs-string">"name"</span>] <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> users <span class="hljs-keyword">if</span> user[<span class="hljs-string">"country"</span>] == <span class="hljs-string">"USA"</span>]<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">list_a = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>]
list_b = [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">42</span>]</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="4val-id">Write a function that will return all numbers that exist in both lists<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="4val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.3.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">def my_intersection_fn(a: List[int], b: List[int]) -&gt; List[int]:
   """Find numbers that are in both lists."""
   ref = a if len(a) &gt; len(b) else b
   return [e for e in ref if (e in a and e in b)]</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_intersection_fn</span>(<span class="hljs-params">a: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], b: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:
   <span class="hljs-string">"""Find numbers that are in both lists."""</span>
   ref = a <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) &gt; <span class="hljs-built_in">len</span>(b) <span class="hljs-keyword">else</span> b
   <span class="hljs-keyword">return</span> [e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> ref <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">in</span> a <span class="hljs-keyword">and</span> e <span class="hljs-keyword">in</span> b)]<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">DEFAULT_SALUTATIONS = <span class="hljs-string">"Hello!"</span>

<span class="hljs-keyword">def</span> <span class="hljs-title function_">enhanced_greeting</span>(<span class="hljs-params">name: <span class="hljs-built_in">str</span>, salutation: <span class="hljs-built_in">str</span> = DEFAULT_SALUTATIONS</span>):
    salutation.replace(<span class="hljs-string">"!"</span>, <span class="hljs-string">""</span>)

    <span class="hljs-keyword">return</span> <span class="hljs-string">f"<span class="hljs-subst">{salutation}</span> <span class="hljs-subst">{name}</span>!"</span>

<span class="hljs-built_in">print</span>(
    enhanced_greeting(<span class="hljs-string">"Mr. Jones"</span>),
    enhanced_greeting(<span class="hljs-string">"Mrs. Jones"</span>, <span class="hljs-string">"Good morning!"</span>),
    enhanced_greeting(<span class="hljs-string">"Mrs. Smith"</span>, <span class="hljs-string">"Good afternoon"</span>)
)</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">When evaluating, what is printed?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="5val-id-0" name="answers.4.value" value="Mr. Jones Mrs. Jones Mrs. Smith"><label class="Form_label__q7ww1" for="5val-id-0">Mr. Jones Mrs. Jones Mrs. Smith</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="5val-id-1" name="answers.4.value" value="Hello! Mr. Jones! Good morning! Mrs. Jones! Good afternoon Mrs. Smith!"><label class="Form_label__q7ww1" for="5val-id-1">Hello! Mr. Jones! Good morning! Mrs. Jones! Good afternoon Mrs. Smith!</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="5val-id-2" name="answers.4.value" value="Hello Mr. Jones! Good morning Mrs. Jones! Good afternoon Mrs.Smith!"><label class="Form_label__q7ww1" for="5val-id-2">Hello Mr. Jones! Good morning Mrs. Jones! Good afternoon Mrs.Smith!</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="5val-id-3" name="answers.4.value" value="Hello Mr. Jones Good morning Mrs. Jones Good afternoon Mrs. Smith"><label class="Form_label__q7ww1" for="5val-id-3">Hello Mr. Jones Good morning Mrs. Jones Good afternoon Mrs. Smith</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-comment"># models.py</span>
<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models

<span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProfile</span>(models.Model):
    birthdate = models.DateField(blank=<span class="hljs-literal">True</span>, null=<span class="hljs-literal">True</span>)
    github_name = models.CharField(max_length=<span class="hljs-number">255</span>, blank=<span class="hljs-literal">True</span>, null=<span class="hljs-literal">True</span>)


<span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(models.Model):
    first_name = models.TextField()
    last_name = models.TextField()
    profile = models.OneToOneField(UserProfile, on_delete=models.CASCADE)



<span class="hljs-comment"># utils.py</span>
<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> User


<span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">
    first_name: <span class="hljs-built_in">str</span>,
    last_name: <span class="hljs-built_in">str</span>,
    github_name: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>,
    birthdate: <span class="hljs-type">Optional</span>[date],
</span>):
    user = User.objects.create(first_name=first_name, last_name=last_name)

    <span class="hljs-keyword">if</span> user.profile:
        user_profile = user.profile

        user_profile.github_name = github_name
        user_profile.birthdate = birthdate
        user_profile.save()

    <span class="hljs-keyword">return</span> user</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you spot the errors in the code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="6val-0" name="answers.5.value" value="throws RelatedObjectDoesNotExist"><label class="Form_label__q7ww1" for="6val-0">throws RelatedObjectDoesNotExist</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="6val-1" name="answers.5.value" value="models are missing save method"><label class="Form_label__q7ww1" for="6val-1">models are missing save method</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="6val-2" name="answers.5.value" value="create_user function definition is invalid"><label class="Form_label__q7ww1" for="6val-2">create_user function definition is invalid</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="6val-3" name="answers.5.value" value="User save method needs to be called to persist to DB"><label class="Form_label__q7ww1" for="6val-3">User save method needs to be called to persist to DB</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_first_odd_number</span>(<span class="hljs-params">numbers</span>):
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> numbers:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>

    <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span>((x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> numbers <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span>), <span class="hljs-literal">None</span>)</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What's the most accurate typing for the function?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="7val-id-0" name="answers.6.value" value="def find_first_odd_number(numbers: Maybe[List[int]]) -> Maybe[int]:"><label class="Form_label__q7ww1" for="7val-id-0">def find_first_odd_number(numbers: Maybe[List[int]]) -&gt; Maybe[int]:</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="7val-id-1" name="answers.6.value" value="def find_first_odd_number(numbers: List[Any]) -> int:"><label class="Form_label__q7ww1" for="7val-id-1">def find_first_odd_number(numbers: List[Any]) -&gt; int:</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="7val-id-2" name="answers.6.value" value="def find_first_odd_number(numbers: Optional[List[int]]) -> Optional[int]:"><label class="Form_label__q7ww1" for="7val-id-2">def find_first_odd_number(numbers: Optional[List[int]]) -&gt; Optional[int]:</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="7val-id-3" name="answers.6.value" value="def find_first_odd_number(numbers: int[]) -> int:"><label class="Form_label__q7ww1" for="7val-id-3">def find_first_odd_number(numbers: int[]) -&gt; int:</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-keyword">def</span> <span class="hljs-title function_">doubler</span>():
    x = <span class="hljs-number">5</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_doubler</span>():
        <span class="hljs-keyword">global</span> x
        <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>

    <span class="hljs-keyword">return</span> inner_doubler()

x = <span class="hljs-number">2</span>

y = doubler()</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What's the value of y?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="8val-id-0" name="answers.7.value" value="10"><label class="Form_label__q7ww1" for="8val-id-0">10</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="8val-id-1" name="answers.7.value" value="NameError: name 'x' is not defined"><label class="Form_label__q7ww1" for="8val-id-1">NameError: name 'x' is not defined</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="8val-id-2" name="answers.7.value" value="TypeError: name 'x' can not be redefined"><label class="Form_label__q7ww1" for="8val-id-2">TypeError: name 'x' can not be redefined</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="8val-id-3" name="answers.7.value" value="4"><label class="Form_label__q7ww1" for="8val-id-3">4</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial

<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_sum</span>(<span class="hljs-params">num_list: Iterable[<span class="hljs-built_in">int</span>], msg: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>):
  total = <span class="hljs-built_in">sum</span>(num_list)
  <span class="hljs-built_in">print</span>(<span class="hljs-string">f"<span class="hljs-subst">{msg}</span>: <span class="hljs-subst">{total}</span>"</span> <span class="hljs-keyword">if</span> msg <span class="hljs-keyword">else</span> total)

calculate_total_cost = partial(print_sum, [<span class="hljs-number">11.22</span>, <span class="hljs-number">54.21</span>, <span class="hljs-number">100</span>])

calculate_total_cost([<span class="hljs-number">50</span>, <span class="hljs-number">60</span>])</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What gets printed when evaluating this code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="9val-id-0" name="answers.8.value" value="110"><label class="Form_label__q7ww1" for="9val-id-0">110</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="9val-id-1" name="answers.8.value" value="TypeError: print_sum takes 1 positional arguments, 2 were given"><label class="Form_label__q7ww1" for="9val-id-1">TypeError: print_sum takes 1 positional arguments, 2 were given</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="9val-id-2" name="answers.8.value" value="[50, 60]: 165.43"><label class="Form_label__q7ww1" for="9val-id-2">[50, 60]: 165.43</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="9val-id-3" name="answers.8.value" value="165.43"><label class="Form_label__q7ww1" for="9val-id-3">165.43</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle

DECK_OF_CARDS = (
    (rank, suit)
    <span class="hljs-keyword">for</span> rank <span class="hljs-keyword">in</span> (*<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>), <span class="hljs-string">"Jack"</span>, <span class="hljs-string">"Queen"</span>, <span class="hljs-string">"King"</span>, <span class="hljs-string">"Ace"</span>)
    <span class="hljs-keyword">for</span> suit <span class="hljs-keyword">in</span> (<span class="hljs-string">"Clubs"</span>, <span class="hljs-string">"Diamonds"</span>, <span class="hljs-string">"Hearts"</span>, <span class="hljs-string">"Spades"</span>)
)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">deal_hand_from_deck</span>(<span class="hljs-params">deck: <span class="hljs-type">List</span>[<span class="hljs-type">Tuple</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>], <span class="hljs-built_in">str</span>]], *, hand_size: <span class="hljs-built_in">int</span> = <span class="hljs-number">5</span></span>):
    <span class="hljs-string">"""Returns the next hand of cards.

    Note: This fn mutates the deck.
    """</span>

    num_of_cards = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(deck), hand_size)
    hand = deck[:num_of_cards]
    deck = deck[num_of_cards:]
    <span class="hljs-keyword">return</span> hand

<span class="hljs-comment"># game 1</span>
deck = shuffle(<span class="hljs-built_in">list</span>(DECK_OF_CARDS))
first_hand = deal_hand_from_deck(deck)

<span class="hljs-comment"># game 2</span>
deck2 = <span class="hljs-built_in">list</span>(DECK_OF_CARDS)
shuffle(deck2)
first_hand2 = deal_hand_from_deck(deck2, <span class="hljs-number">2</span>)</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you spot the errors in the code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="10val-0" name="answers.9.value" value="deck is None"><label class="Form_label__q7ww1" for="10val-0">deck is None</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="10val-1" name="answers.9.value" value="deck2 is empty"><label class="Form_label__q7ww1" for="10val-1">deck2 is empty</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="10val-2" name="answers.9.value" value="deal_hand_from_deck(deck2, 2) is a TypeError"><label class="Form_label__q7ww1" for="10val-2">deal_hand_from_deck(deck2, 2) is a TypeError</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="10val-3" name="answers.9.value" value="(*range(2,11)) is a syntax error"><label class="Form_label__q7ww1" for="10val-3">(*range(2,11)) is a syntax error</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, TypedDict


<span class="hljs-keyword">class</span> <span class="hljs-title class_">Library</span>(<span class="hljs-title class_ inherited__">TypedDict</span>):
    language: <span class="hljs-built_in">str</span>
    name: <span class="hljs-built_in">str</span>


libraries: <span class="hljs-type">List</span>[Library] = [
    { <span class="hljs-string">"language"</span>: <span class="hljs-string">"java"</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">"Spring"</span> },
    { <span class="hljs-string">"language"</span>: <span class="hljs-string">"javascript"</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">"React"</span> },
    { <span class="hljs-string">"language"</span>: <span class="hljs-string">"javascript"</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">"Svelte"</span> },
    { <span class="hljs-string">"language"</span>: <span class="hljs-string">"python"</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">"Django"</span> },
    { <span class="hljs-string">"language"</span>: <span class="hljs-string">"python"</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">"Flask"</span> },
    { <span class="hljs-string">"language"</span>: <span class="hljs-string">"ruby"</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">"Ruby on Rails"</span> },
]


<span class="hljs-keyword">def</span> <span class="hljs-title function_">group_by_lang</span>(<span class="hljs-params">xs: <span class="hljs-type">List</span>[Library]</span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">List</span>[Library]]:
    <span class="hljs-string">"""Returns a dictionary of lists, keyed by language."""</span>
    <span class="hljs-comment"># Your code here</span></code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="11val-id">Write a function to group items into a dict by language<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="11val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.10.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">def group_by_lang(libs: List[Library]) -&gt; Dict[str, List[Library]]:
    """Returns a dictionary of lists, keyed by language."""
    lib_dict = {}
    for lib in libs:
      lang = lib["language"]
      if not lib_dict[lang]:
        lib_dict[lang] = []
      lib_dict[lang].append(lib)

    return lib_dict</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-keyword">def</span> <span class="hljs-title function_">group_by_lang</span>(<span class="hljs-params">libs: <span class="hljs-type">List</span>[Library]</span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">List</span>[Library]]:
    <span class="hljs-string">"""Returns a dictionary of lists, keyed by language."""</span>
    lib_dict = {}
    <span class="hljs-keyword">for</span> lib <span class="hljs-keyword">in</span> libs:
      lang = lib[<span class="hljs-string">"language"</span>]
      <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> lib_dict[lang]:
        lib_dict[lang] = []
      lib_dict[lang].append(lib)

    <span class="hljs-keyword">return</span> lib_dict<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">x = (
     <span class="hljs-string">"Lorem ipsum dolor sit amet, "</span>
     <span class="hljs-string">"consetetur sadipscing elitr, sed diam nonumy eirmod "</span>
     <span class="hljs-string">"tempor invidunt ut labore et dolore magna aliquyam "</span>
     <span class="hljs-string">"erat, sed diam voluptua. "</span>
)</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What is the type of x?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="12val-id-0" name="answers.11.value" value="tuple"><label class="Form_label__q7ww1" for="12val-id-0">tuple</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="12val-id-1" name="answers.11.value" value="str"><label class="Form_label__q7ww1" for="12val-id-1">str</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="12val-id-2" name="answers.11.value" value="Syntax error"><label class="Form_label__q7ww1" for="12val-id-2">Syntax error</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="12val-id-3" name="answers.11.value" value="list"><label class="Form_label__q7ww1" for="12val-id-3">list</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs">DEFAULT_FAVORITE_NUMBER = <span class="hljs-number">1</span>

<span class="hljs-keyword">def</span> <span class="hljs-title function_">not_a_great_function</span>(<span class="hljs-params">name, age, *, favorite_color, favorite_numbers=[]</span>):
    <span class="hljs-comment"># If the user hasn't selected any numbers, we'll use some defaults</span>
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> favorite_numbers:
        favorite_numbers.append(DEFAULT_FAVORITE_NUMBER)

    <span class="hljs-keyword">return</span> User(
        name=name,
        age=age,
        favorite_numbers=favorite_numbers,
        favorite_color=favorite_color,
    )</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you spot the errors in the code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="13val-0" name="answers.12.value" value="`*` is a syntax error"><label class="Form_label__q7ww1" for="13val-0">`*` is a syntax error</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="13val-1" name="answers.12.value" value="`favorite_color` must have a default value"><label class="Form_label__q7ww1" for="13val-1">`favorite_color` must have a default value</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="13val-2" name="answers.12.value" value="`favorite_numbers` should not default to a list"><label class="Form_label__q7ww1" for="13val-2">`favorite_numbers` should not default to a list</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="13val-3" name="answers.12.value" value="Cannot evaluate `favorite_numbers` list as boolean"><label class="Form_label__q7ww1" for="13val-3">Cannot evaluate `favorite_numbers` list as boolean</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint


<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
    <span class="hljs-string">"""Returns a list of integers, sometimes 1-5, otherwise 1-10."""</span>
    x = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)

    <span class="hljs-keyword">if</span> randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>) &gt;= <span class="hljs-number">7</span>:
        x.extend(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)

    <span class="hljs-keyword">return</span> x</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you identify the issues in the code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="14val-0" name="answers.13.value" value="`extend` takes an iterable, not variadic args"><label class="Form_label__q7ww1" for="14val-0">`extend` takes an iterable, not variadic args</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="14val-1" name="answers.13.value" value="`randint` does not accept parameters"><label class="Form_label__q7ww1" for="14val-1">`randint` does not accept parameters</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="14val-2" name="answers.13.value" value="`extend` is not a method, should use `push` instead"><label class="Form_label__q7ww1" for="14val-2">`extend` is not a method, should use `push` instead</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="14val-3" name="answers.13.value" value="Should use list instead of tuple"><label class="Form_label__q7ww1" for="14val-3">Should use list instead of tuple</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-comment"># models.py</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span>(models.Model):
    name = models.TextField()
    abbreviation = models.CharField(max_length=<span class="hljs-number">3</span>)
    country_abbreviation = models.CharField(max_length=<span class="hljs-number">3</span>)


<span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span>(models.Model):
    street_address = models.TextField(null=<span class="hljs-literal">True</span>)
    postal_code = models.CharField(max_length=<span class="hljs-number">32</span>, null=<span class="hljs-literal">True</span>)
    city = models.TextField(null=<span class="hljs-literal">True</span>)
    state = models.ForeignKey(State, on_delete=models.CASCADE)


<span class="hljs-keyword">class</span> <span class="hljs-title class_">Event</span>(models.model):
    title = models.TextField()
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=<span class="hljs-literal">True</span>)


<span class="hljs-comment"># views.py</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">EventListView</span>(<span class="hljs-title class_ inherited__">ListView</span>):
    model = Event
    paginate_by = <span class="hljs-number">25</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_queryset</span>(<span class="hljs-params">self, **kwargs</span>):
        <span class="hljs-keyword">return</span> YOUR_QUERYSET_SELECTION


<span class="hljs-comment"># myapp/event_list.html</span>
{% block content %}
&lt;h3&gt;Upcoming Events&lt;/h3&gt;
&lt;ul&gt;
{% <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> object_list %}
  &lt;li&gt;{{event.title}} ({{event.location.city}}, {{event.location.state.abbreviation}})&lt;/li&gt;
{% empty %}
  &lt;li&gt;No Events&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
{% endblock content %}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Which Queryset would be the most efficient?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="15val-id-0" name="answers.14.value" value="return super().get_queryset()"><label class="Form_label__q7ww1" for="15val-id-0">return super().get_queryset()</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="15val-id-1" name="answers.14.value" value="models.Event.objects.select_related('location', 'state')"><label class="Form_label__q7ww1" for="15val-id-1">models.Event.objects.select_related('location', 'state')</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="15val-id-2" name="answers.14.value" value="super().get_queryset().select_related('location', 'location__state')"><label class="Form_label__q7ww1" for="15val-id-2">super().get_queryset().select_related('location', 'location__state')</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="15val-id-3" name="answers.14.value" value="super().get_queryset().prefetch_related('location')"><label class="Form_label__q7ww1" for="15val-id-3">super().get_queryset().prefetch_related('location')</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-comment"># Requirements</span>
<span class="hljs-comment"># This is an Employee record which will be linked to a User</span>
<span class="hljs-comment"># We want to track information such as,</span>
<span class="hljs-comment"># - Company</span>
<span class="hljs-comment"># - User who hired this employee</span>
<span class="hljs-comment"># - Hire date</span>
<span class="hljs-comment"># - Start date</span>
<span class="hljs-comment"># - End date</span>
<span class="hljs-comment"># - Status</span>
<span class="hljs-comment"># - Employment type (part time, full time, etc)</span>
<span class="hljs-comment"># - Anything else you think might be important!</span></code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="16val-id">Craft model class for Employees<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="16val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.15.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">from django.db import models</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-python hljs"><span class="hljs-meta">@require_http_methods(<span class="hljs-params">[<span class="hljs-string">"POST"</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_profile_view</span>(<span class="hljs-params">request</span>):
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.user <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> request.user.is_authenticated:
        <span class="hljs-keyword">return</span> HttpResponseForbidden()

    user = request.user

    user.first_name = request.POST.get(<span class="hljs-string">"first_name"</span>, user.first_name)
    user.last_name = request.POST.get(<span class="hljs-string">"last_name"</span>, user.last_name)
    user.email = request.POST.get(<span class="hljs-string">"email"</span>, user.email)
    user.updated_at = datetime.now()
    user.save()

    <span class="hljs-keyword">return</span> render(
        request,
        <span class="hljs-string">"templates/edit_profile.html"</span>,
        context=<span class="hljs-built_in">dict</span>(),
    )</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Which improvements could be made?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="17val-0" name="answers.16.value" value="Use django timezone util"><label class="Form_label__q7ww1" for="17val-0">Use django timezone util</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="17val-1" name="answers.16.value" value="Add @login_required decorator"><label class="Form_label__q7ww1" for="17val-1">Add @login_required decorator</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="17val-2" name="answers.16.value" value="Specify update_fields on save"><label class="Form_label__q7ww1" for="17val-2">Specify update_fields on save</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="17val-3" name="answers.16.value" value="Django requires the use of a View Class"><label class="Form_label__q7ww1" for="17val-3">Django requires the use of a View Class</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs">;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)
  <span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>
  <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>
})()</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What does the function above log?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="18val-id-0" name="answers.17.value" value="undefined"><label class="Form_label__q7ww1" for="18val-id-0">undefined</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="18val-id-1" name="answers.17.value" value="5"><label class="Form_label__q7ww1" for="18val-id-1">5</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="18val-id-2" name="answers.17.value" value="10"><label class="Form_label__q7ww1" for="18val-id-2">10</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="18val-id-3" name="answers.17.value" value="Function throws error: Uncaught ReferenceError: x is not defined"><label class="Form_label__q7ww1" for="18val-id-3">Function throws error: Uncaught ReferenceError: x is not defined</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs">;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)
  <span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span>
  <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>
})()</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What does the function above log?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="19val-id-0" name="answers.18.value" value="undefined"><label class="Form_label__q7ww1" for="19val-id-0">undefined</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="19val-id-1" name="answers.18.value" value="5"><label class="Form_label__q7ww1" for="19val-id-1">5</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="19val-id-2" name="answers.18.value" value="10"><label class="Form_label__q7ww1" for="19val-id-2">10</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="19val-id-3" name="answers.18.value" value="Function throws error: Uncaught ReferenceError: x is not defined"><label class="Form_label__q7ww1" for="19val-id-3">Function throws error: Uncaught ReferenceError: x is not defined</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs">;(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(double)
  <span class="hljs-keyword">function</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">x</span>) {
    <span class="hljs-keyword">return</span> x * <span class="hljs-number">2</span>
  }
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">double</span>(<span class="hljs-number">5</span>)
})()</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What does the function above log?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="20val-id-0" name="answers.19.value" value="undefined"><label class="Form_label__q7ww1" for="20val-id-0">undefined</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="20val-id-1" name="answers.19.value" value="f double(x) { ... }"><label class="Form_label__q7ww1" for="20val-id-1">f double(x) { ... }</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="20val-id-2" name="answers.19.value" value="Function throws error: Uncaught ReferenceError: double is not defined"><label class="Form_label__q7ww1" for="20val-id-2">Function throws error: Uncaught ReferenceError: double is not defined</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-javascript hljs"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)
  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i))
}
</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What does this loop log?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="21val-id-0" name="answers.20.value" value="0, 0, 1, 1, 2, 2, 3, 3, 4, 4"><label class="Form_label__q7ww1" for="21val-id-0">0, 0, 1, 1, 2, 2, 3, 3, 4, 4</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="21val-id-1" name="answers.20.value" value="0, 1, 2, 3, 4, 5, 5, 5, 5, 5"><label class="Form_label__q7ww1" for="21val-id-1">0, 1, 2, 3, 4, 5, 5, 5, 5, 5</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="21val-id-2" name="answers.20.value" value="0, 1, 2, 3, 4, 0, 1, 2, 3, 4"><label class="Form_label__q7ww1" for="21val-id-2">0, 1, 2, 3, 4, 0, 1, 2, 3, 4</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="21val-id-3" name="answers.20.value" value="0, 1, 2, 3, 4, 4, 4, 4, 4, 4"><label class="Form_label__q7ww1" for="21val-id-3">0, 1, 2, 3, 4, 4, 4, 4, 4, 4</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-javascript hljs"><span class="hljs-keyword">const</span> users = [
  {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Stefan Maggio'</span>,
    <span class="hljs-attr">state</span>: <span class="hljs-string">'CO'</span>,
  },
  {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Keyshawn Carroll'</span>,
    <span class="hljs-attr">state</span>: <span class="hljs-string">'ID'</span>,
  },
  {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Andrew Barton'</span>,
    <span class="hljs-attr">state</span>: <span class="hljs-string">'CO'</span>,
  },
  {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Thea Crooks'</span>,
    <span class="hljs-attr">state</span>: <span class="hljs-string">'NV'</span>,
  },
  {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Justus Kautzer'</span>,
    <span class="hljs-attr">state</span>: <span class="hljs-string">'MN'</span>,
  },
]</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="22val-id">Write a function to return all users who live in a particular state.<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="22val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.21.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">const get_users_of_state = (users, state) =&gt; users.filter((user) =&gt; user.state === state)</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-keyword">const</span> <span class="hljs-title function_">get_users_of_state</span> = (<span class="hljs-params">users, state</span>) =&gt; users.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> user.<span class="hljs-property">state</span> === state)<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doubler</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">number</span> | <span class="hljs-built_in">number</span>[] {
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">double</span> = (<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>) =&gt; x * <span class="hljs-number">2</span>

  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(x)) {
    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">map</span>(double)
  }

  <span class="hljs-keyword">return</span> <span class="hljs-title function_">double</span>(x)
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="23val-id">How would you improve the types of this function?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="23val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.22.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">function doubler(x: number | number[]): number | number[] {
  const double = (n: number) =&gt; n * 2

  if (Array.isArray(x)) {
    return x.map(double) as number[]
  }

  return double(x) as number
}</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doubler</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">number</span> | <span class="hljs-built_in">number</span>[] {
  <span class="hljs-keyword">const</span> <span class="hljs-title function_">double</span> = (<span class="hljs-params">n: <span class="hljs-built_in">number</span></span>) =&gt; n * <span class="hljs-number">2</span>

  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(x)) {
    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">map</span>(double) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>[]
  }

  <span class="hljs-keyword">return</span> <span class="hljs-title function_">double</span>(x) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>
}<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">9</span>]

numbers.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x)</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What does typescript infer the type of x to be?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="24val-id-0" name="answers.23.value" value="any"><label class="Form_label__q7ww1" for="24val-id-0">any</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="24val-id-1" name="answers.23.value" value="number | null"><label class="Form_label__q7ww1" for="24val-id-1">number | null</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="24val-id-2" name="answers.23.value" value="number"><label class="Form_label__q7ww1" for="24val-id-2">number</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="24val-id-3" name="answers.23.value" value="number | true"><label class="Form_label__q7ww1" for="24val-id-3">number | true</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">interface</span> Context {
  <span class="hljs-attr">isCool</span>: <span class="hljs-built_in">boolean</span>
  isAuthenticated?: <span class="hljs-built_in">boolean</span>
}

<span class="hljs-keyword">const</span> <span class="hljs-attr">context</span>: <span class="hljs-title class_">Context</span> = {
  <span class="hljs-attr">isCool</span>: <span class="hljs-literal">true</span>,
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">addAuth</span>(<span class="hljs-params">ctx: <span class="hljs-built_in">any</span></span>) {
  ctx.<span class="hljs-property">isAuthenticated</span> = <span class="hljs-literal">true</span>
}

<span class="hljs-title function_">addAuth</span>(context)

<span class="hljs-keyword">const</span> authed = context.<span class="hljs-property">isAuthenticated</span></code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">How would you let typescript know the authed constant is true?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="25val-id-0" name="answers.24.value" value="Change the Context interface to make isAuthenticated not optional"><label class="Form_label__q7ww1" for="25val-id-0">Change the Context interface to make isAuthenticated not optional</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="25val-id-1" name="answers.24.value" value="Change addAuth to use Context interface instead of any"><label class="Form_label__q7ww1" for="25val-id-1">Change addAuth to use Context interface instead of any</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="25val-id-2" name="answers.24.value" value="Add a type assertion after addAuth"><label class="Form_label__q7ww1" for="25val-id-2">Add a type assertion after addAuth</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="25val-id-3" name="answers.24.value" value="Define as const authed: true = context.isAuthenticated"><label class="Form_label__q7ww1" for="25val-id-3">Define as const authed: true = context.isAuthenticated</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">User</span> = {
    <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>
    <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>
}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">User</span> {
    <span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>
}
</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you spot the error with the above code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="26val-id-0" name="answers.25.value" value="String should not be capitalized"><label class="Form_label__q7ww1" for="26val-id-0">String should not be capitalized</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="26val-id-1" name="answers.25.value" value="Number should be capitalized"><label class="Form_label__q7ww1" for="26val-id-1">Number should be capitalized</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="26val-id-2" name="answers.25.value" value="Should be interface Employee extends"><label class="Form_label__q7ww1" for="26val-id-2">Should be interface Employee extends</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="26val-id-3" name="answers.25.value" value="Missing = between User and {"><label class="Form_label__q7ww1" for="26val-id-3">Missing = between User and {</label></div></div></div><div class="mb-16"><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What are some properties of generics?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="27val-0" name="answers.26.value" value="They don't work with primitives"><label class="Form_label__q7ww1" for="27val-0">They don't work with primitives</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="27val-1" name="answers.26.value" value="They enable stronger typing by avoiding any in some cases"><label class="Form_label__q7ww1" for="27val-1">They enable stronger typing by avoiding any in some cases</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="27val-2" name="answers.26.value" value="They can be avoided by writing smarter types"><label class="Form_label__q7ww1" for="27val-2">They can be avoided by writing smarter types</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="27val-3" name="answers.26.value" value="Allow us to write more reusable code"><label class="Form_label__q7ww1" for="27val-3">Allow us to write more reusable code</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="27val-4" name="answers.26.value" value="They are super annoying and I hate them"><label class="Form_label__q7ww1" for="27val-4">They are super annoying and I hate them</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-html hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//google.com"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span>&gt;</span>My Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What's wrong with the above HTML?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="28val-0" name="answers.27.value" value="The href prop is missing a protocol (i.e. https)"><label class="Form_label__q7ww1" for="28val-0">The href prop is missing a protocol (i.e. https)</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="28val-1" name="answers.27.value" value="A button is not a valid child of an anchor"><label class="Form_label__q7ww1" for="28val-1">A button is not a valid child of an anchor</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="28val-2" name="answers.27.value" value="External links should have rel=&quot;noopener noreferrer&quot;"><label class="Form_label__q7ww1" for="28val-2">External links should have rel="noopener noreferrer"</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="28val-3" name="answers.27.value" value="Nothing, it's perfect"><label class="Form_label__q7ww1" for="28val-3">Nothing, it's perfect</label></div></div></div><div class="mb-16"><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Why should a label always be associated with an input?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="29val-0" name="answers.28.value" value="For screen readers to know which label belongs to each input"><label class="Form_label__q7ww1" for="29val-0">For screen readers to know which label belongs to each input</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="29val-1" name="answers.28.value" value="It's required for HTML form validation"><label class="Form_label__q7ww1" for="29val-1">It's required for HTML form validation</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="29val-2" name="answers.28.value" value="So clicking it focuses the input"><label class="Form_label__q7ww1" for="29val-2">So clicking it focuses the input</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="29val-3" name="answers.28.value" value="Enables tab navigation to the correct next input"><label class="Form_label__q7ww1" for="29val-3">Enables tab navigation to the correct next input</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="29val-4" name="answers.28.value" value="This is an outdated requirement in modern HTML"><label class="Form_label__q7ww1" for="29val-4">This is an outdated requirement in modern HTML</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-html hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"badge"</span>&gt;</span>Badge<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="30val-id">Write the CSS required to position the span.badge on the right and vertically center it with the h1.title<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="30val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.29.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">.header {
  display: flex;
  flex-direction: row;
}

.header &gt; .badge {
  align-self: right;
}</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-selector-class">.header</span> {
  <span class="hljs-attribute">display</span>: flex;
  <span class="hljs-attribute">flex-direction</span>: row;
}

<span class="hljs-selector-class">.header</span> &gt; <span class="hljs-selector-class">.badge</span> {
  <span class="hljs-attribute">align-self</span>: right;
}<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-html hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"headerTitle"</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">
  <span class="hljs-selector-tag">h1</span> {
    <span class="hljs-attribute">color</span>: red;
  }

  <span class="hljs-selector-class">.title</span> {
    <span class="hljs-attribute">color</span>: green;
  }

  <span class="hljs-selector-id">#headerTitle</span> {
    <span class="hljs-attribute">color</span>: blue;
  }

  <span class="hljs-selector-class">.header</span> &gt; <span class="hljs-selector-class">.title</span> {
    <span class="hljs-attribute">color</span>: purple;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What color is the title text?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="31val-id-0" name="answers.30.value" value="red"><label class="Form_label__q7ww1" for="31val-id-0">red</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="31val-id-1" name="answers.30.value" value="green"><label class="Form_label__q7ww1" for="31val-id-1">green</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="31val-id-2" name="answers.30.value" value="blue"><label class="Form_label__q7ww1" for="31val-id-2">blue</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="31val-id-3" name="answers.30.value" value="purple"><label class="Form_label__q7ww1" for="31val-id-3">purple</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-html hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"headerTitle"</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">
  <span class="hljs-selector-tag">h1</span> {
    <span class="hljs-attribute">color</span>: red;
  }

  <span class="hljs-selector-class">.title</span> {
    <span class="hljs-attribute">color</span>: green;
  }

  <span class="hljs-selector-id">#headerTitle</span> {
    <span class="hljs-attribute">color</span>: blue;
  }

  <span class="hljs-selector-class">.header</span> &gt; <span class="hljs-selector-class">.title</span> {
    <span class="hljs-attribute">color</span>: purple;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="32val-id">Add another selector to make the title pink<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_codeEditor__NNGYy" id="32val-id" style="position:relative;text-align:left;box-sizing:border-box;padding:0;overflow:hidden"><textarea style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:absolute;top:0;left:0;height:100%;width:100%;resize:none;color:inherit;overflow:hidden;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-text-fill-color:transparent;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px" class="npm__react-simple-code-editor__textarea" name="answers.31.value" autocapitalize="off" autocomplete="off" autocorrect="off" spellcheck="false" data-gramm="false">.header &gt; .title #headerTitle {
  color: pink !important;
}</textarea><pre aria-hidden="true" style="margin:0;border:0;background:none;box-sizing:inherit;display:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-variant-ligatures:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;tab-size:inherit;text-indent:inherit;text-rendering:inherit;text-transform:inherit;white-space:pre-wrap;word-break:keep-all;overflow-wrap:break-word;position:relative;pointer-events:none;padding-top:12px;padding-right:12px;padding-bottom:12px;padding-left:12px"><span class="hljs-selector-class">.header</span> &gt; <span class="hljs-selector-class">.title</span> <span class="hljs-selector-id">#headerTitle</span> {
  <span class="hljs-attribute">color</span>: pink <span class="hljs-meta">!important</span>;
}<br></pre><style type="text/css">
/**
 * Reset the text fill color so that placeholder is visible
 */
.npm__react-simple-code-editor__textarea:empty {
  -webkit-text-fill-color: inherit !important;
}

/**
 * Hack to apply on some CSS on IE10 and IE11
 */
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /**
    * IE doesn't support '-webkit-text-fill-color'
    * So we use 'color: transparent' to make the text transparent on IE
    * Unlike other browsers, it doesn't affect caret color in IE
    */
  .npm__react-simple-code-editor__textarea {
    color: transparent !important;
  }

  .npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
</style></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> uniqueFruits = [<span class="hljs-string">'Jackfruit'</span>, <span class="hljs-string">'Durian'</span>, <span class="hljs-string">'Rambutan'</span>, <span class="hljs-string">'Lychee'</span>, <span class="hljs-string">'Cherimoya'</span>]
  <span class="hljs-keyword">const</span> [fruitCount, setFruitCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)

  <span class="hljs-title function_">setFruitCount</span>(uniqueFruits.<span class="hljs-property">length</span>)

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>List of fruits ({fruitCount})<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
      {uniqueFruits.map((fruit) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{fruit}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  )
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What is wrong with the above example?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="33val-0" name="answers.32.value" value="The mapped items are missing keys"><label class="Form_label__q7ww1" for="33val-0">The mapped items are missing keys</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="33val-1" name="answers.32.value" value="The map function is missing a return statement"><label class="Form_label__q7ww1" for="33val-1">The map function is missing a return statement</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="33val-2" name="answers.32.value" value="Calling setState in the render function is not recommended"><label class="Form_label__q7ww1" for="33val-2">Calling setState in the render function is not recommended</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="33val-3" name="answers.32.value" value="Rambutan is a made up name that just sounds cool"><label class="Form_label__q7ww1" for="33val-3">Rambutan is a made up name that just sounds cool</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="33val-4" name="answers.32.value" value="The fruit count should not be stored in state"><label class="Form_label__q7ww1" for="33val-4">The fruit count should not be stored in state</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="33val-5" name="answers.32.value" value="React will initially render 0 then re-render with the correct fruit count"><label class="Form_label__q7ww1" for="33val-5">React will initially render 0 then re-render with the correct fruit count</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyForm</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">'Joe'</span>)

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>
      <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">{()</span> =&gt;</span> {
        console.log(name)
      }}
    &gt;
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span>
        <span class="hljs-attr">value</span>=<span class="hljs-string">{name}</span>
        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> {
          setName(e.target.value)
        }}
      /&gt;
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>
        <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> {
          setName('')
        }}
      &gt;
        Reset
      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>
  )
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What will this component log when you press each button?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="34val-id-0" name="answers.33.value" value="Joe for submit, Joe for reset"><label class="Form_label__q7ww1" for="34val-id-0">Joe for submit, Joe for reset</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="34val-id-1" name="answers.33.value" value="Joe for submit, nothing for reset"><label class="Form_label__q7ww1" for="34val-id-1">Joe for submit, nothing for reset</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="34val-id-2" name="answers.33.value" value="Joe for submit, empty string for reset"><label class="Form_label__q7ww1" for="34val-id-2">Joe for submit, empty string for reset</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="34val-id-3" name="answers.33.value" value="Nothing for submit, nothing for reset"><label class="Form_label__q7ww1" for="34val-id-3">Nothing for submit, nothing for reset</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">useFetcher</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> (searchString) =&gt; {
    <span class="hljs-keyword">return</span> [
      {
        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,
      },
      {
        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,
      },
    ]
  }
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">{ searchString, children }</span>) {
  <span class="hljs-keyword">const</span> [matches, setMatches] = <span class="hljs-title function_">useState</span>([])
  <span class="hljs-keyword">const</span> fetcher = <span class="hljs-title function_">useFetcher</span>()

  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">fetcher</span>(searchString)
      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">items</span>) =&gt;</span> <span class="hljs-title function_">setMatches</span>(items))
      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err)
      })
  }, [searchString, fetcher])

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
      {matches.map((match) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{match.id}</span>&gt;</span>{match}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
      ))}
      {children}
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>
  )
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you spot the problems in the above example?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="35val-0" name="answers.34.value" value="The async arrow function doesn't return a Promise"><label class="Form_label__q7ww1" for="35val-0">The async arrow function doesn't return a Promise</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="35val-1" name="answers.34.value" value="The result of useFetcher is not stable so it will trigger the effect on every render"><label class="Form_label__q7ww1" for="35val-1">The result of useFetcher is not stable so it will trigger the effect on every render</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="35val-2" name="answers.34.value" value="Children can't be rendered there because only li are valid children of ul"><label class="Form_label__q7ww1" for="35val-2">Children can't be rendered there because only li are valid children of ul</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="35val-3" name="answers.34.value" value="Should use an index for the key because match.id will throw when there are no matches"><label class="Form_label__q7ww1" for="35val-3">Should use an index for the key because match.id will throw when there are no matches</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [cards, setCards] = <span class="hljs-title function_">useState</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);
  <span class="hljs-keyword">const</span> [pickedCard, setPickedCard] = <span class="hljs-title function_">useState</span>();

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">pickRandomCard</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">const</span> randomIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">5</span>);
    <span class="hljs-keyword">const</span> card = cards.<span class="hljs-title function_">splice</span>(randomIndex, <span class="hljs-number">1</span>);
    <span class="hljs-title function_">setPickedCard</span>(card);
  };

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{pickRandomCard}</span>&gt;</span>Pick a Card<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{pickedCard}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Can you spot the issue in the above code?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="36val-id-0" name="answers.35.value" value="The random card will never include the last one because it uses Math.floor"><label class="Form_label__q7ww1" for="36val-id-0">The random card will never include the last one because it uses Math.floor</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="36val-id-1" name="answers.35.value" value="The cards array is mutated by the splice method"><label class="Form_label__q7ww1" for="36val-id-1">The cards array is mutated by the splice method</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="36val-id-2" name="answers.35.value" value="The pickedCard state is not initialized properly"><label class="Form_label__q7ww1" for="36val-id-2">The pickedCard state is not initialized properly</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="36val-id-3" name="answers.35.value" value="Nothing, this works fine"><label class="Form_label__q7ww1" for="36val-id-3">Nothing, this works fine</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-typescript hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [loading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);
  <span class="hljs-keyword">const</span> [posts, setPosts] = <span class="hljs-title function_">useState</span>([]);

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">startLoading</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>);
  };

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">loadPosts</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-keyword">if</span> (loading) {
      <span class="hljs-title function_">setPosts</span>([{ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> }, { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> }]);
    }
  };

  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; {
    <span class="hljs-title function_">startLoading</span>();
    <span class="hljs-title function_">loadPosts</span>();
  };

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleClick}</span>&gt;</span>Load Posts<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
      {posts.map((post) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{post.id}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  );
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What will be the value of posts after pressing the button?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="37val-id-0" name="answers.36.value" value="[{ id: 1 }, { id: 2 }]"><label class="Form_label__q7ww1" for="37val-id-0">[{ id: 1 }, { id: 2 }]</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="37val-id-1" name="answers.36.value" value="[]"><label class="Form_label__q7ww1" for="37val-id-1">[]</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="37val-id-2" name="answers.36.value" value="true"><label class="Form_label__q7ww1" for="37val-id-2">true</label></div></div></div><div class="mb-16"><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What are some recommended ways to avoid props drilling in React?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="38val-0" name="answers.37.value" value="Use context"><label class="Form_label__q7ww1" for="38val-0">Use context</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="38val-1" name="answers.37.value" value="Add values to window object"><label class="Form_label__q7ww1" for="38val-1">Add values to window object</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="38val-2" name="answers.37.value" value="Use a state management library like redux or apollo"><label class="Form_label__q7ww1" for="38val-2">Use a state management library like redux or apollo</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="38val-3" name="answers.37.value" value="Add values to localStorage"><label class="Form_label__q7ww1" for="38val-3">Add values to localStorage</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="38val-4" name="answers.37.value" value="Fetch from backend in parent and child component"><label class="Form_label__q7ww1" for="38val-4">Fetch from backend in parent and child component</label></div></div></div><div class="mb-16"><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Which of the following statements are true of react?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="39val-id-0" name="answers.38.value" value="setState in class components is asynchronous, setState from hooks is not"><label class="Form_label__q7ww1" for="39val-id-0">setState in class components is asynchronous, setState from hooks is not</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="39val-id-1" name="answers.38.value" value="setState from hooks is asynchronous, setState from class components is not"><label class="Form_label__q7ww1" for="39val-id-1">setState from hooks is asynchronous, setState from class components is not</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="39val-id-2" name="answers.38.value" value="both setState from class components and hooks are asynchronous"><label class="Form_label__q7ww1" for="39val-id-2">both setState from class components and hooks are asynchronous</label></div></div></div><div class="mb-16"><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What are key args in Apollo GraphQL for?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="40val-id-0" name="answers.39.value" value="They tell apollo which key to use to identify an object"><label class="Form_label__q7ww1" for="40val-id-0">They tell apollo which key to use to identify an object</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="40val-id-1" name="answers.39.value" value="__typename and id"><label class="Form_label__q7ww1" for="40val-id-1">__typename and id</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="40val-id-2" name="answers.39.value" value="They tell apollo which query variables should be used to cache results together"><label class="Form_label__q7ww1" for="40val-id-2">They tell apollo which query variables should be used to cache results together</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="40val-id-3" name="answers.39.value" value="Query and variables"><label class="Form_label__q7ww1" for="40val-id-3">Query and variables</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-graphql hljs"><span class="hljs-keyword">mutation</span><span class="hljs-literal"> AddPost</span>(<span class="hljs-name">$title</span>:<span class="hljs-literal"> String</span>!, <span class="hljs-name">$stars</span>:<span class="hljs-literal"> Int</span>, <span class="hljs-name">$description</span>:<span class="hljs-literal"> String</span>!, <span class="hljs-name">$draft</span>:<span class="hljs-literal"> Boolean</span>) {
  addPost(title: <span class="hljs-name">$title</span>, stars: <span class="hljs-name">$stars</span>, description: <span class="hljs-name">$description</span>, draft: <span class="hljs-name">$draft</span>) {
    success
  }
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">Which variables are required in the GraphQL mutation above?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="41val-0" name="answers.40.value" value="$title"><label class="Form_label__q7ww1" for="41val-0">$title</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="41val-1" name="answers.40.value" value="$stars"><label class="Form_label__q7ww1" for="41val-1">$stars</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="41val-2" name="answers.40.value" value="$description"><label class="Form_label__q7ww1" for="41val-2">$description</label></div><div class="Form_choiceGroup__73B7e"><input type="checkbox" class="Form_checkbox__vu9ii mr-2" id="41val-3" name="answers.40.value" value="$draft"><label class="Form_label__q7ww1" for="41val-3">$draft</label></div></div></div><div class="mb-16"><div class="Assessment_codeExample__f2h9Q mb-4"><pre><code class="language-graphql hljs"><span class="hljs-keyword">type</span><span class="hljs-literal"> User</span> {
  id:<span class="hljs-literal"> Int</span>!
  teams: [<span class="hljs-literal">Team</span>]!
}

<span class="hljs-keyword">type</span><span class="hljs-literal"> Author</span> {
  id:<span class="hljs-literal"> Int</span>!
  books: [<span class="hljs-literal">Books</span>!]!
}</code></pre></div><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA">What is different about the way user teams and author books are defined in the graphql schema above?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="42val-id-0" name="answers.41.value" value="The ! in the Books array is a syntax error"><label class="Form_label__q7ww1" for="42val-id-0">The ! in the Books array is a syntax error</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="42val-id-1" name="answers.41.value" value="The ! in the Books array is optional and doesn't do anything"><label class="Form_label__q7ww1" for="42val-id-1">The ! in the Books array is optional and doesn't do anything</label></div><div class="Form_choiceGroup__73B7e mb-1"><input type="radio" class="Form_radio__fTctR mr-2" id="42val-id-2" name="answers.41.value" value="The ! after the Books array is optional and doesn't do anything"><label class="Form_label__q7ww1" for="42val-id-2">The ! after the Books array is optional and doesn't do anything</label></div><div class="Form_choiceGroup__73B7e"><input type="radio" class="Form_radio__fTctR mr-2" id="42val-id-3" name="answers.41.value" value="User teams can return null items"><label class="Form_label__q7ww1" for="42val-id-3">User teams can return null items</label></div></div></div><div class="mb-16"><div class=""><label class="Form_label__q7ww1 Assessment_label__wAWSA" for="43val-id">What did you think of the assessment?<!-- --> <span class="Form_requiredIndicator__aoM7W" aria-label="required" title="required">*</span></label><textarea class="Form_textarea__Vgxbj Form_input__8CpY_" id="43val-id" name="answers.42.value">A handful of decent questions, but largely pedagogical and pedantic, the format of the assessment could not be further from the way in which I work nor think. Although I tried, the "no other tabs open" policy was really annoying and a highly inefficient use of my time. I generally have tabs open with docs and apis open because i do not memorize syntax or apis. Additionally, I work iteratively, rapidly running tiny hypotheses and building up larger pieces of functionality, but that requires an IDE or runtime to do so (i tried using browser console for js, but got "pinky promised"...).</textarea></div></div><button class="Button_root__oUSH3 Button_blue__seg3a" type="submit">Submit</button></form></div></div></div><footer class="Footer_footer__aYlrA"><div class="Container_root__FEEeO Footer_container__E5btf"><div class="Footer_column__wtvDq Footer_spacing__o4gan"><h2 class="Heading_root__SyOvZ Footer_heading__A1vF4">©<!-- -->2022<!-- --> Uplift Agency Ltd.</h2><p>All rights reserved.</p></div><div class="Footer_column__wtvDq Footer_spacing__o4gan"><h2 class="Heading_root__SyOvZ Footer_heading__A1vF4">Get in Touch</h2><a class="" href="/contact-us/">Contact Us</a><a href="https://twitter.com/upliftltd" title="upliftltd">Twitter</a><a href="https://github.com/uplift-ltd" title="uplift-ltd">GitHub</a><a href="/feed/"><span class="icon icon-rss" aria-hidden="true"></span>RSS</a></div><div class="Footer_column__wtvDq"><address class="Footer_address__l5eGu"><h2 class="Heading_root__SyOvZ Footer_heading__A1vF4">Address</h2>2480 Kittredge Loop Dr #932<br>Boulder, CO 80310<br><a class="Address_link__NCZhX" href="tel:+14154183420">(415) 418-3420</a></address></div></div></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"isAuthenticated":true,"currentUser":{"__typename":"User","id":"cl2byuike000009ldnve818oj","email":"nmvinson@gmail.com","name":"Nick Vinson","role":"CANDIDATE"},"__APOLLO__":{"User:cl2byuike000009ldnve818oj":{"id":"cl2byuike000009ldnve818oj","__typename":"User","email":"nmvinson@gmail.com","name":"Nick Vinson","role":"CANDIDATE"},"ROOT_QUERY":{"__typename":"Query","isAuthenticated":true,"me":{"__ref":"User:cl2byuike000009ldnve818oj"},"assessment({\"id\":\"cl2byuinm001009ldx2gxaj1q\"})":{"__ref":"Assessment:cl2byuinm001009ldx2gxaj1q"}},"Assessment:cl2byuinm001009ldx2gxaj1q":{"id":"cl2byuinm001009ldx2gxaj1q","__typename":"Assessment","blurCount":0,"blurDuration":0,"completed":null,"focusDuration":0,"user":{"__ref":"User:cl2byuike000009ldnve818oj"},"score":null,"questions":[{"__typename":"CodeQuestion","slug":"questions/python-reverse","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"odd_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]","lang":"python"},"title":"Reverse this list without using builtin functions","description":null,"valueCodeLang":null,"defaultValue":"def my_reverse_fn(xs):\n    \"\"\"Reverses a list without using a built-in function such as `reverse` or `reversed`.\"\"\"\n    # Your code here","answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/python-map-value","options":[{"__typename":"QuestionOption","label":"\u003cmap at 0x107c28a01\u003e","value":"\u003cmap at 0x107c28a01\u003e","points":null},{"__typename":"QuestionOption","label":"[0, 2, 4, 6, 8]","value":"[0, 2, 4, 6, 8]","points":null},{"__typename":"QuestionOption","label":"(0, 2, 4, 6, 8)","value":"(0, 2, 4, 6, 8)","points":null},{"__typename":"QuestionOption","label":"TypeError: 'range' is not iterable","value":"TypeError: 'range' is not iterable","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"x = map(lambda x: x * 2, range(5))","lang":"python"},"title":"What's the value of x?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/python-list-of-dicts","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"users = [\n    { \"name\": \"Bill\", \"age\": 37, \"country\": \"USA\" },\n    { \"name\": \"Susan\", \"age\": 21, \"country\": \"Canada\" },\n    { \"name\": \"Glenda\", \"age\": 61, \"country\": \"Britain\" },\n    { \"name\": \"Astro\", \"age\": 12, \"country\": \"USA\" },\n]","lang":"python"},"title":"Get a list of user names from the list for users in the USA","description":null,"valueCodeLang":null,"defaultValue":"# user_names = your code","answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/python-set-intersection","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"list_a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]\nlist_b = [4, 8, 15, 16, 23, 42]","lang":"python"},"title":"Write a function that will return all numbers that exist in both lists","description":null,"valueCodeLang":null,"defaultValue":"def my_intersection_fn(a: List[int], b: List[int]) -\u003e List[int]:\n   \"\"\"Find numbers that are in both lists.\"\"\"\n   # Your code goes here","answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/python-immutable-strings","options":[{"__typename":"QuestionOption","label":"Mr. Jones Mrs. Jones Mrs. Smith","value":"Mr. Jones Mrs. Jones Mrs. Smith","points":null},{"__typename":"QuestionOption","label":"Hello! Mr. Jones! Good morning! Mrs. Jones! Good afternoon Mrs. Smith!","value":"Hello! Mr. Jones! Good morning! Mrs. Jones! Good afternoon Mrs. Smith!","points":null},{"__typename":"QuestionOption","label":"Hello Mr. Jones! Good morning Mrs. Jones! Good afternoon Mrs.Smith!","value":"Hello Mr. Jones! Good morning Mrs. Jones! Good afternoon Mrs.Smith!","points":null},{"__typename":"QuestionOption","label":"Hello Mr. Jones Good morning Mrs. Jones Good afternoon Mrs. Smith","value":"Hello Mr. Jones Good morning Mrs. Jones Good afternoon Mrs. Smith","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"DEFAULT_SALUTATIONS = \"Hello!\"\n\ndef enhanced_greeting(name: str, salutation: str = DEFAULT_SALUTATIONS):\n    salutation.replace(\"!\", \"\")\n\n    return f\"{salutation} {name}!\"\n\nprint(\n    enhanced_greeting(\"Mr. Jones\"),\n    enhanced_greeting(\"Mrs. Jones\", \"Good morning!\"),\n    enhanced_greeting(\"Mrs. Smith\", \"Good afternoon\")\n)","lang":"python"},"title":"When evaluating, what is printed?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/django-onetoone","options":[{"__typename":"QuestionOption","label":"throws RelatedObjectDoesNotExist","value":"throws RelatedObjectDoesNotExist","points":null},{"__typename":"QuestionOption","label":"models are missing save method","value":"models are missing save method","points":null},{"__typename":"QuestionOption","label":"create_user function definition is invalid","value":"create_user function definition is invalid","points":null},{"__typename":"QuestionOption","label":"User save method needs to be called to persist to DB","value":"User save method needs to be called to persist to DB","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"# models.py\nfrom django.db import models\n\nclass UserProfile(models.Model):\n    birthdate = models.DateField(blank=True, null=True)\n    github_name = models.CharField(max_length=255, blank=True, null=True)\n\n\nclass User(models.Model):\n    first_name = models.TextField()\n    last_name = models.TextField()\n    profile = models.OneToOneField(UserProfile, on_delete=models.CASCADE)\n\n\n\n# utils.py\nfrom .models import User\n\n\ndef create_user(\n    first_name: str,\n    last_name: str,\n    github_name: Optional[str] = None,\n    birthdate: Optional[date],\n):\n    user = User.objects.create(first_name=first_name, last_name=last_name)\n\n    if user.profile:\n        user_profile = user.profile\n\n        user_profile.github_name = github_name\n        user_profile.birthdate = birthdate\n        user_profile.save()\n\n    return user","lang":"python"},"title":"Can you spot the errors in the code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/python-typing","options":[{"__typename":"QuestionOption","label":"def find_first_odd_number(numbers: Maybe[List[int]]) -\u003e Maybe[int]:","value":"def find_first_odd_number(numbers: Maybe[List[int]]) -\u003e Maybe[int]:","points":null},{"__typename":"QuestionOption","label":"def find_first_odd_number(numbers: List[Any]) -\u003e int:","value":"def find_first_odd_number(numbers: List[Any]) -\u003e int:","points":null},{"__typename":"QuestionOption","label":"def find_first_odd_number(numbers: Optional[List[int]]) -\u003e Optional[int]:","value":"def find_first_odd_number(numbers: Optional[List[int]]) -\u003e Optional[int]:","points":null},{"__typename":"QuestionOption","label":"def find_first_odd_number(numbers: int[]) -\u003e int:","value":"def find_first_odd_number(numbers: int[]) -\u003e int:","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"def find_first_odd_number(numbers):\n    if not numbers:\n        return None\n\n    return next((x for x in numbers if x % 2), None)","lang":"python"},"title":"What's the most accurate typing for the function?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/python-scoping","options":[{"__typename":"QuestionOption","label":"10","value":"10","points":null},{"__typename":"QuestionOption","label":"NameError: name 'x' is not defined","value":"NameError: name 'x' is not defined","points":null},{"__typename":"QuestionOption","label":"TypeError: name 'x' can not be redefined","value":"TypeError: name 'x' can not be redefined","points":null},{"__typename":"QuestionOption","label":"4","value":"4","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"def doubler():\n    x = 5\n\n    def inner_doubler():\n        global x\n        return x * 2\n\n    return inner_doubler()\n\nx = 2\n\ny = doubler()","lang":"python"},"title":"What's the value of y?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/python-partial","options":[{"__typename":"QuestionOption","label":"110","value":"110","points":null},{"__typename":"QuestionOption","label":"TypeError: print_sum takes 1 positional arguments, 2 were given","value":"TypeError: print_sum takes 1 positional arguments, 2 were given","points":null},{"__typename":"QuestionOption","label":"[50, 60]: 165.43","value":"[50, 60]: 165.43","points":null},{"__typename":"QuestionOption","label":"165.43","value":"165.43","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"from functools import partial\n\ndef print_sum(num_list: Iterable[int], msg: Optional[str] = None):\n  total = sum(num_list)\n  print(f\"{msg}: {total}\" if msg else total)\n\ncalculate_total_cost = partial(print_sum, [11.22, 54.21, 100])\n\ncalculate_total_cost([50, 60])","lang":"python"},"title":"What gets printed when evaluating this code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/python-generator","options":[{"__typename":"QuestionOption","label":"deck is None","value":"deck is None","points":null},{"__typename":"QuestionOption","label":"deck2 is empty","value":"deck2 is empty","points":null},{"__typename":"QuestionOption","label":"deal_hand_from_deck(deck2, 2) is a TypeError","value":"deal_hand_from_deck(deck2, 2) is a TypeError","points":null},{"__typename":"QuestionOption","label":"(*range(2,11)) is a syntax error","value":"(*range(2,11)) is a syntax error","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"from random import shuffle\n\nDECK_OF_CARDS = (\n    (rank, suit)\n    for rank in (*range(2, 11), \"Jack\", \"Queen\", \"King\", \"Ace\")\n    for suit in (\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\")\n)\n\n\ndef deal_hand_from_deck(deck: List[Tuple[Union[int, str], str]], *, hand_size: int = 5):\n    \"\"\"Returns the next hand of cards.\n\n    Note: This fn mutates the deck.\n    \"\"\"\n\n    num_of_cards = min(len(deck), hand_size)\n    hand = deck[:num_of_cards]\n    deck = deck[num_of_cards:]\n    return hand\n\n# game 1\ndeck = shuffle(list(DECK_OF_CARDS))\nfirst_hand = deal_hand_from_deck(deck)\n\n# game 2\ndeck2 = list(DECK_OF_CARDS)\nshuffle(deck2)\nfirst_hand2 = deal_hand_from_deck(deck2, 2)","lang":"python"},"title":"Can you spot the errors in the code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/python-group-list-items","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"from typing import Dict, List, TypedDict\n\n\nclass Library(TypedDict):\n    language: str\n    name: str\n\n\nlibraries: List[Library] = [\n    { \"language\": \"java\", \"name\": \"Spring\" },\n    { \"language\": \"javascript\", \"name\": \"React\" },\n    { \"language\": \"javascript\", \"name\": \"Svelte\" },\n    { \"language\": \"python\", \"name\": \"Django\" },\n    { \"language\": \"python\", \"name\": \"Flask\" },\n    { \"language\": \"ruby\", \"name\": \"Ruby on Rails\" },\n]\n\n\ndef group_by_lang(xs: List[Library]) -\u003e Dict[str, List[Library]]:\n    \"\"\"Returns a dictionary of lists, keyed by language.\"\"\"\n    # Your code here","lang":"python"},"title":"Write a function to group items into a dict by language","description":null,"valueCodeLang":null,"defaultValue":"def group_by_lang(xs: List[Library]) -\u003e Dict[str, List[Library]]:\n    \"\"\"Returns a dictionary of lists, keyed by language.\"\"\"\n    # Your code here","answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/python-line-continuation","options":[{"__typename":"QuestionOption","label":"tuple","value":"tuple","points":null},{"__typename":"QuestionOption","label":"str","value":"str","points":null},{"__typename":"QuestionOption","label":"Syntax error","value":"Syntax error","points":null},{"__typename":"QuestionOption","label":"list","value":"list","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"x = (\n     \"Lorem ipsum dolor sit amet, \"\n     \"consetetur sadipscing elitr, sed diam nonumy eirmod \"\n     \"tempor invidunt ut labore et dolore magna aliquyam \"\n     \"erat, sed diam voluptua. \"\n)","lang":"python"},"title":"What is the type of x?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/python-bad-default-argument","options":[{"__typename":"QuestionOption","label":"`*` is a syntax error","value":"`*` is a syntax error","points":null},{"__typename":"QuestionOption","label":"`favorite_color` must have a default value","value":"`favorite_color` must have a default value","points":null},{"__typename":"QuestionOption","label":"`favorite_numbers` should not default to a list","value":"`favorite_numbers` should not default to a list","points":null},{"__typename":"QuestionOption","label":"Cannot evaluate `favorite_numbers` list as boolean","value":"Cannot evaluate `favorite_numbers` list as boolean","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"DEFAULT_FAVORITE_NUMBER = 1\n\ndef not_a_great_function(name, age, *, favorite_color, favorite_numbers=[]):\n    # If the user hasn't selected any numbers, we'll use some defaults\n    if not favorite_numbers:\n        favorite_numbers.append(DEFAULT_FAVORITE_NUMBER)\n\n    return User(\n        name=name,\n        age=age,\n        favorite_numbers=favorite_numbers,\n        favorite_color=favorite_color,\n    )","lang":"python"},"title":"Can you spot the errors in the code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/python-bad-code-tuple","options":[{"__typename":"QuestionOption","label":"`extend` takes an iterable, not variadic args","value":"`extend` takes an iterable, not variadic args","points":null},{"__typename":"QuestionOption","label":"`randint` does not accept parameters","value":"`randint` does not accept parameters","points":null},{"__typename":"QuestionOption","label":"`extend` is not a method, should use `push` instead","value":"`extend` is not a method, should use `push` instead","points":null},{"__typename":"QuestionOption","label":"Should use list instead of tuple","value":"Should use list instead of tuple","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"from random import randint\n\n\ndef main():\n    \"\"\"Returns a list of integers, sometimes 1-5, otherwise 1-10.\"\"\"\n    x = (1, 2, 3, 4, 5)\n\n    if randint(1, 10) \u003e= 7:\n        x.extend(6, 7, 8, 9, 10)\n\n    return x","lang":"python"},"title":"Can you identify the issues in the code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/django-select-related","options":[{"__typename":"QuestionOption","label":"return super().get_queryset()","value":"return super().get_queryset()","points":null},{"__typename":"QuestionOption","label":"models.Event.objects.select_related('location', 'state')","value":"models.Event.objects.select_related('location', 'state')","points":null},{"__typename":"QuestionOption","label":"super().get_queryset().select_related('location', 'location__state')","value":"super().get_queryset().select_related('location', 'location__state')","points":null},{"__typename":"QuestionOption","label":"super().get_queryset().prefetch_related('location')","value":"super().get_queryset().prefetch_related('location')","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"# models.py\nclass State(models.Model):\n    name = models.TextField()\n    abbreviation = models.CharField(max_length=3)\n    country_abbreviation = models.CharField(max_length=3)\n\n\nclass Location(models.Model):\n    street_address = models.TextField(null=True)\n    postal_code = models.CharField(max_length=32, null=True)\n    city = models.TextField(null=True)\n    state = models.ForeignKey(State, on_delete=models.CASCADE)\n\n\nclass Event(models.model):\n    title = models.TextField()\n    location = models.ForeignKey(Location, on_delete=models.CASCADE)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n\n\n# views.py\nclass EventListView(ListView):\n    model = Event\n    paginate_by = 25\n\n    def get_queryset(self, **kwargs):\n        return YOUR_QUERYSET_SELECTION\n\n\n# myapp/event_list.html\n{% block content %}\n\u003ch3\u003eUpcoming Events\u003c/h3\u003e\n\u003cul\u003e\n{% for event in object_list %}\n  \u003cli\u003e{{event.title}} ({{event.location.city}}, {{event.location.state.abbreviation}})\u003c/li\u003e\n{% empty %}\n  \u003cli\u003eNo Events\u003c/li\u003e\n{% endfor %}\n\u003c/ul\u003e\n{% endblock content %}","lang":"python"},"title":"Which Queryset would be the most efficient?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/django-model-code","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"# Requirements\n# This is an Employee record which will be linked to a User\n# We want to track information such as,\n# - Company\n# - User who hired this employee\n# - Hire date\n# - Start date\n# - End date\n# - Status\n# - Employment type (part time, full time, etc)\n# - Anything else you think might be important!","lang":"python"},"title":"Craft model class for Employees","description":null,"valueCodeLang":null,"defaultValue":"from django.db import models","answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/django-model-save","options":[{"__typename":"QuestionOption","label":"Use django timezone util","value":"Use django timezone util","points":null},{"__typename":"QuestionOption","label":"Add @login_required decorator","value":"Add @login_required decorator","points":null},{"__typename":"QuestionOption","label":"Specify update_fields on save","value":"Specify update_fields on save","points":null},{"__typename":"QuestionOption","label":"Django requires the use of a View Class","value":"Django requires the use of a View Class","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"@require_http_methods([\"POST\"])\ndef edit_profile_view(request):\n    if not request.user or not request.user.is_authenticated:\n        return HttpResponseForbidden()\n\n    user = request.user\n\n    user.first_name = request.POST.get(\"first_name\", user.first_name)\n    user.last_name = request.POST.get(\"last_name\", user.last_name)\n    user.email = request.POST.get(\"email\", user.email)\n    user.updated_at = datetime.now()\n    user.save()\n\n    return render(\n        request,\n        \"templates/edit_profile.html\",\n        context=dict(),\n    )","lang":"python"},"title":"Which improvements could be made?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/js-scope-var","options":[{"__typename":"QuestionOption","label":"undefined","value":"undefined","points":null},{"__typename":"QuestionOption","label":"5","value":"5","points":null},{"__typename":"QuestionOption","label":"10","value":"10","points":null},{"__typename":"QuestionOption","label":"Function throws error: Uncaught ReferenceError: x is not defined","value":"Function throws error: Uncaught ReferenceError: x is not defined","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":";(function () {\n  console.log(x)\n  var x = 5\n  return x * 2\n})()","lang":"typescript"},"title":"What does the function above log?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/js-scope-let","options":[{"__typename":"QuestionOption","label":"undefined","value":"undefined","points":null},{"__typename":"QuestionOption","label":"5","value":"5","points":null},{"__typename":"QuestionOption","label":"10","value":"10","points":null},{"__typename":"QuestionOption","label":"Function throws error: Uncaught ReferenceError: x is not defined","value":"Function throws error: Uncaught ReferenceError: x is not defined","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":";(function () {\n  console.log(x)\n  let x = 5\n  return x * 2\n})()","lang":"typescript"},"title":"What does the function above log?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/js-scope-function","options":[{"__typename":"QuestionOption","label":"undefined","value":"undefined","points":null},{"__typename":"QuestionOption","label":"f double(x) { ... }","value":"f double(x) { ... }","points":null},{"__typename":"QuestionOption","label":"Function throws error: Uncaught ReferenceError: double is not defined","value":"Function throws error: Uncaught ReferenceError: double is not defined","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":";(function () {\n  console.log(double)\n  function double(x) {\n    return x * 2\n  }\n  return double(5)\n})()","lang":"typescript"},"title":"What does the function above log?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/js-loop-async","options":[{"__typename":"QuestionOption","label":"0, 0, 1, 1, 2, 2, 3, 3, 4, 4","value":"0, 0, 1, 1, 2, 2, 3, 3, 4, 4","points":null},{"__typename":"QuestionOption","label":"0, 1, 2, 3, 4, 5, 5, 5, 5, 5","value":"0, 1, 2, 3, 4, 5, 5, 5, 5, 5","points":null},{"__typename":"QuestionOption","label":"0, 1, 2, 3, 4, 0, 1, 2, 3, 4","value":"0, 1, 2, 3, 4, 0, 1, 2, 3, 4","points":null},{"__typename":"QuestionOption","label":"0, 1, 2, 3, 4, 4, 4, 4, 4, 4","value":"0, 1, 2, 3, 4, 4, 4, 4, 4, 4","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"for (var i = 0; i \u003c 5; i++) {\n  console.log(i)\n  setTimeout(() =\u003e console.log(i))\n}\n","lang":"javascript"},"title":"What does this loop log?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/js-array-filter","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"const users = [\n  {\n    name: 'Stefan Maggio',\n    state: 'CO',\n  },\n  {\n    name: 'Keyshawn Carroll',\n    state: 'ID',\n  },\n  {\n    name: 'Andrew Barton',\n    state: 'CO',\n  },\n  {\n    name: 'Thea Crooks',\n    state: 'NV',\n  },\n  {\n    name: 'Justus Kautzer',\n    state: 'MN',\n  },\n]","lang":"javascript"},"title":"Write a function to return all users who live in a particular state.","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/ts-overloads","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"function doubler(x: number | number[]): number | number[] {\n  const double = (x: number) =\u003e x * 2\n\n  if (Array.isArray(x)) {\n    return x.map(double)\n  }\n\n  return double(x)\n}","lang":"typescript"},"title":"How would you improve the types of this function?","description":null,"valueCodeLang":null,"defaultValue":"function doubler(x: number | number[]): number | number[] {\n  const double = (x: number) =\u003e x * 2\n\n  if (Array.isArray(x)) {\n    return x.map(double)\n  }\n\n  return double(x)\n}","answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/ts-filter-infer","options":[{"__typename":"QuestionOption","label":"any","value":"any","points":null},{"__typename":"QuestionOption","label":"number | null","value":"number | null","points":null},{"__typename":"QuestionOption","label":"number","value":"number","points":null},{"__typename":"QuestionOption","label":"number | true","value":"number | true","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"const numbers = [1, null, 3, 4, 5, null, 9]\n\nnumbers.filter(Boolean).map((x) =\u003e x)","lang":"typescript"},"title":"What does typescript infer the type of x to be?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/ts-assertions","options":[{"__typename":"QuestionOption","label":"Change the Context interface to make isAuthenticated not optional","value":"Change the Context interface to make isAuthenticated not optional","points":null},{"__typename":"QuestionOption","label":"Change addAuth to use Context interface instead of any","value":"Change addAuth to use Context interface instead of any","points":null},{"__typename":"QuestionOption","label":"Add a type assertion after addAuth","value":"Add a type assertion after addAuth","points":null},{"__typename":"QuestionOption","label":"Define as const authed: true = context.isAuthenticated","value":"Define as const authed: true = context.isAuthenticated","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"interface Context {\n  isCool: boolean\n  isAuthenticated?: boolean\n}\n\nconst context: Context = {\n  isCool: true,\n}\n\nfunction addAuth(ctx: any) {\n  ctx.isAuthenticated = true\n}\n\naddAuth(context)\n\nconst authed = context.isAuthenticated","lang":"typescript"},"title":"How would you let typescript know the authed constant is true?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/ts-syntax","options":[{"__typename":"QuestionOption","label":"String should not be capitalized","value":"String should not be capitalized","points":null},{"__typename":"QuestionOption","label":"Number should be capitalized","value":"Number should be capitalized","points":null},{"__typename":"QuestionOption","label":"Should be interface Employee extends","value":"Should be interface Employee extends","points":null},{"__typename":"QuestionOption","label":"Missing = between User and {","value":"Missing = between User and {","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"type User = {\n    id: number\n    name: String\n}\n\ntype Employee extends User {\n    isActive: boolean\n}\n","lang":"typescript"},"title":"Can you spot the error with the above code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/ts-generics","options":[{"__typename":"QuestionOption","label":"They don't work with primitives","value":"They don't work with primitives","points":null},{"__typename":"QuestionOption","label":"They enable stronger typing by avoiding any in some cases","value":"They enable stronger typing by avoiding any in some cases","points":null},{"__typename":"QuestionOption","label":"They can be avoided by writing smarter types","value":"They can be avoided by writing smarter types","points":null},{"__typename":"QuestionOption","label":"Allow us to write more reusable code","value":"Allow us to write more reusable code","points":null},{"__typename":"QuestionOption","label":"They are super annoying and I hate them","value":"They are super annoying and I hate them","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":null,"title":"What are some properties of generics?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/html-anchor-button","options":[{"__typename":"QuestionOption","label":"The href prop is missing a protocol (i.e. https)","value":"The href prop is missing a protocol (i.e. https)","points":null},{"__typename":"QuestionOption","label":"A button is not a valid child of an anchor","value":"A button is not a valid child of an anchor","points":null},{"__typename":"QuestionOption","label":"External links should have rel=\"noopener noreferrer\"","value":"External links should have rel=\"noopener noreferrer\"","points":null},{"__typename":"QuestionOption","label":"Nothing, it's perfect","value":"Nothing, it's perfect","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"\u003ca href=\"//google.com\"\u003e\n  \u003cbutton type=\"button\"\u003eMy Button\u003c/button\u003e\n\u003c/a\u003e","lang":"html"},"title":"What's wrong with the above HTML?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/html-label-input","options":[{"__typename":"QuestionOption","label":"For screen readers to know which label belongs to each input","value":"For screen readers to know which label belongs to each input","points":null},{"__typename":"QuestionOption","label":"It's required for HTML form validation","value":"It's required for HTML form validation","points":null},{"__typename":"QuestionOption","label":"So clicking it focuses the input","value":"So clicking it focuses the input","points":null},{"__typename":"QuestionOption","label":"Enables tab navigation to the correct next input","value":"Enables tab navigation to the correct next input","points":null},{"__typename":"QuestionOption","label":"This is an outdated requirement in modern HTML","value":"This is an outdated requirement in modern HTML","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":null,"title":"Why should a label always be associated with an input?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/css-flexbox","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"\u003cdiv class=\"header\"\u003e\n  \u003ch1 class=\"title\"\u003eTitle\u003c/h1\u003e\n  \u003cspan class=\"badge\"\u003eBadge\u003c/span\u003e\n\u003c/div\u003e\n","lang":"html"},"title":"Write the CSS required to position the span.badge on the right and vertically center it with the h1.title","description":null,"valueCodeLang":"css","defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/css-specificity","options":[{"__typename":"QuestionOption","label":"red","value":"red","points":null},{"__typename":"QuestionOption","label":"green","value":"green","points":null},{"__typename":"QuestionOption","label":"blue","value":"blue","points":null},{"__typename":"QuestionOption","label":"purple","value":"purple","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"\u003cdiv class=\"header\"\u003e\n  \u003ch1 class=\"title\" id=\"headerTitle\"\u003eTitle\u003c/h1\u003e\n\u003c/div\u003e\n\n\u003cstyle\u003e\n  h1 {\n    color: red;\n  }\n\n  .title {\n    color: green;\n  }\n\n  #headerTitle {\n    color: blue;\n  }\n\n  .header \u003e .title {\n    color: purple;\n  }\n\u003c/style\u003e","lang":"html"},"title":"What color is the title text?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CodeQuestion","slug":"questions/css-specificity-code","blurDuration":null,"focusDuration":null,"type":"CODE","coverImage":null,"code":{"__typename":"Code","code":"\u003cdiv class=\"header\"\u003e\n  \u003ch1 class=\"title\" id=\"headerTitle\"\u003eTitle\u003c/h1\u003e\n\u003c/div\u003e\n\n\u003cstyle\u003e\n  h1 {\n    color: red;\n  }\n\n  .title {\n    color: green;\n  }\n\n  #headerTitle {\n    color: blue;\n  }\n\n  .header \u003e .title {\n    color: purple;\n  }\n\u003c/style\u003e","lang":"html"},"title":"Add another selector to make the title pink","description":null,"valueCodeLang":"css","defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/react-bad-component","options":[{"__typename":"QuestionOption","label":"The mapped items are missing keys","value":"The mapped items are missing keys","points":null},{"__typename":"QuestionOption","label":"The map function is missing a return statement","value":"The map function is missing a return statement","points":null},{"__typename":"QuestionOption","label":"Calling setState in the render function is not recommended","value":"Calling setState in the render function is not recommended","points":null},{"__typename":"QuestionOption","label":"Rambutan is a made up name that just sounds cool","value":"Rambutan is a made up name that just sounds cool","points":null},{"__typename":"QuestionOption","label":"The fruit count should not be stored in state","value":"The fruit count should not be stored in state","points":null},{"__typename":"QuestionOption","label":"React will initially render 0 then re-render with the correct fruit count","value":"React will initially render 0 then re-render with the correct fruit count","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"export function MyComponent() {\n  const uniqueFruits = ['Jackfruit', 'Durian', 'Rambutan', 'Lychee', 'Cherimoya']\n  const [fruitCount, setFruitCount] = useState(0)\n\n  setFruitCount(uniqueFruits.length)\n\n  return (\n    \u003cdiv\u003e\n      \u003ch1\u003eList of fruits ({fruitCount})\u003c/h1\u003e\n      {uniqueFruits.map((fruit) =\u003e (\n        \u003cp\u003e{fruit}\u003c/p\u003e\n      ))}\n    \u003c/div\u003e\n  )\n}","lang":"typescript"},"title":"What is wrong with the above example?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/react-bad-form","options":[{"__typename":"QuestionOption","label":"Joe for submit, Joe for reset","value":"Joe for submit, Joe for reset","points":null},{"__typename":"QuestionOption","label":"Joe for submit, nothing for reset","value":"Joe for submit, nothing for reset","points":null},{"__typename":"QuestionOption","label":"Joe for submit, empty string for reset","value":"Joe for submit, empty string for reset","points":null},{"__typename":"QuestionOption","label":"Nothing for submit, nothing for reset","value":"Nothing for submit, nothing for reset","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"export function MyForm() {\n  const [name, setName] = useState('Joe')\n\n  return (\n    \u003cform\n      onSubmit={() =\u003e {\n        console.log(name)\n      }}\n    \u003e\n      \u003cinput\n        value={name}\n        onChange={(e) =\u003e {\n          setName(e.target.value)\n        }}\n      /\u003e\n      \u003cbutton type=\"submit\"\u003eSubmit\u003c/button\u003e\n      \u003cbutton\n        onClick={() =\u003e {\n          setName('')\n        }}\n      \u003e\n        Reset\n      \u003c/button\u003e\n    \u003c/form\u003e\n  )\n}","lang":"typescript"},"title":"What will this component log when you press each button?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/react-use-effect","options":[{"__typename":"QuestionOption","label":"The async arrow function doesn't return a Promise","value":"The async arrow function doesn't return a Promise","points":null},{"__typename":"QuestionOption","label":"The result of useFetcher is not stable so it will trigger the effect on every render","value":"The result of useFetcher is not stable so it will trigger the effect on every render","points":null},{"__typename":"QuestionOption","label":"Children can't be rendered there because only li are valid children of ul","value":"Children can't be rendered there because only li are valid children of ul","points":null},{"__typename":"QuestionOption","label":"Should use an index for the key because match.id will throw when there are no matches","value":"Should use an index for the key because match.id will throw when there are no matches","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"function useFetcher() {\n  return async (searchString) =\u003e {\n    return [\n      {\n        id: 1,\n      },\n      {\n        id: 2,\n      },\n    ]\n  }\n}\n\nexport function MyComponent({ searchString, children }) {\n  const [matches, setMatches] = useState([])\n  const fetcher = useFetcher()\n\n  useEffect(() =\u003e {\n    fetcher(searchString)\n      .then((items) =\u003e setMatches(items))\n      .catch((err) =\u003e {\n        console.error(err)\n      })\n  }, [searchString, fetcher])\n\n  return (\n    \u003cul\u003e\n      {matches.map((match) =\u003e (\n        \u003cli key={match.id}\u003e{match}\u003c/li\u003e\n      ))}\n      {children}\n    \u003c/ul\u003e\n  )\n}","lang":"typescript"},"title":"Can you spot the problems in the above example?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/react-mutate-state","options":[{"__typename":"QuestionOption","label":"The random card will never include the last one because it uses Math.floor","value":"The random card will never include the last one because it uses Math.floor","points":null},{"__typename":"QuestionOption","label":"The cards array is mutated by the splice method","value":"The cards array is mutated by the splice method","points":null},{"__typename":"QuestionOption","label":"The pickedCard state is not initialized properly","value":"The pickedCard state is not initialized properly","points":null},{"__typename":"QuestionOption","label":"Nothing, this works fine","value":"Nothing, this works fine","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"function MyComponent() {\n  const [cards, setCards] = useState([1, 2, 3, 4, 5]);\n  const [pickedCard, setPickedCard] = useState();\n\n  const pickRandomCard = () =\u003e {\n    const randomIndex = Math.floor(Math.random() * 5);\n    const card = cards.splice(randomIndex, 1);\n    setPickedCard(card);\n  };\n\n  return (\n    \u003cdiv\u003e\n      \u003cbutton onClick={pickRandomCard}\u003ePick a Card\u003c/button\u003e\n      \u003cdiv\u003e{pickedCard}\u003c/div\u003e\n    \u003c/div\u003e\n  );\n}","lang":"typescript"},"title":"Can you spot the issue in the above code?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/react-state-update","options":[{"__typename":"QuestionOption","label":"[{ id: 1 }, { id: 2 }]","value":"[{ id: 1 }, { id: 2 }]","points":null},{"__typename":"QuestionOption","label":"[]","value":"[]","points":null},{"__typename":"QuestionOption","label":"true","value":"true","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"function MyComponent() {\n  const [loading, setLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n\n  const startLoading = () =\u003e {\n    setLoading(true);\n  };\n\n  const loadPosts = () =\u003e {\n    if (loading) {\n      setPosts([{ id: 1 }, { id: 2 }]);\n    }\n  };\n\n  const handleClick = () =\u003e {\n    startLoading();\n    loadPosts();\n  };\n\n  return (\n    \u003cdiv\u003e\n      \u003cbutton onClick={handleClick}\u003eLoad Posts\u003c/button\u003e\n      {posts.map((post) =\u003e (\n        \u003cdiv\u003e{post.id}\u003c/div\u003e\n      ))}\n    \u003c/div\u003e\n  );\n}","lang":"typescript"},"title":"What will be the value of posts after pressing the button?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/react-props-drilling","options":[{"__typename":"QuestionOption","label":"Use context","value":"Use context","points":null},{"__typename":"QuestionOption","label":"Add values to window object","value":"Add values to window object","points":null},{"__typename":"QuestionOption","label":"Use a state management library like redux or apollo","value":"Use a state management library like redux or apollo","points":null},{"__typename":"QuestionOption","label":"Add values to localStorage","value":"Add values to localStorage","points":null},{"__typename":"QuestionOption","label":"Fetch from backend in parent and child component","value":"Fetch from backend in parent and child component","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":null,"title":"What are some recommended ways to avoid props drilling in React?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/react-state-async","options":[{"__typename":"QuestionOption","label":"setState in class components is asynchronous, setState from hooks is not","value":"setState in class components is asynchronous, setState from hooks is not","points":null},{"__typename":"QuestionOption","label":"setState from hooks is asynchronous, setState from class components is not","value":"setState from hooks is asynchronous, setState from class components is not","points":null},{"__typename":"QuestionOption","label":"both setState from class components and hooks are asynchronous","value":"both setState from class components and hooks are asynchronous","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":null,"title":"Which of the following statements are true of react?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/graphql-apollo-key-args","options":[{"__typename":"QuestionOption","label":"They tell apollo which key to use to identify an object","value":"They tell apollo which key to use to identify an object","points":null},{"__typename":"QuestionOption","label":"__typename and id","value":"__typename and id","points":null},{"__typename":"QuestionOption","label":"They tell apollo which query variables should be used to cache results together","value":"They tell apollo which query variables should be used to cache results together","points":null},{"__typename":"QuestionOption","label":"Query and variables","value":"Query and variables","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":null,"title":"What are key args in Apollo GraphQL for?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"CheckboxQuestion","slug":"questions/graphql-variables","options":[{"__typename":"QuestionOption","label":"$title","value":"$title","points":null},{"__typename":"QuestionOption","label":"$stars","value":"$stars","points":null},{"__typename":"QuestionOption","label":"$description","value":"$description","points":null},{"__typename":"QuestionOption","label":"$draft","value":"$draft","points":null}],"blurDuration":null,"focusDuration":null,"type":"CHECKBOX","coverImage":null,"code":{"__typename":"Code","code":"mutation AddPost($title: String!, $stars: Int, $description: String!, $draft: Boolean) {\n  addPost(title: $title, stars: $stars, description: $description, draft: $draft) {\n    success\n  }\n}","lang":"graphql"},"title":"Which variables are required in the GraphQL mutation above?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"RadioQuestion","slug":"questions/graphql-required","options":[{"__typename":"QuestionOption","label":"The ! in the Books array is a syntax error","value":"The ! in the Books array is a syntax error","points":null},{"__typename":"QuestionOption","label":"The ! in the Books array is optional and doesn't do anything","value":"The ! in the Books array is optional and doesn't do anything","points":null},{"__typename":"QuestionOption","label":"The ! after the Books array is optional and doesn't do anything","value":"The ! after the Books array is optional and doesn't do anything","points":null},{"__typename":"QuestionOption","label":"User teams can return null items","value":"User teams can return null items","points":null}],"blurDuration":null,"focusDuration":null,"type":"RADIO","coverImage":null,"code":{"__typename":"Code","code":"type User {\n  id: Int!\n  teams: [Team]!\n}\n\ntype Author {\n  id: Int!\n  books: [Books!]!\n}","lang":"graphql"},"title":"What is different about the way user teams and author books are defined in the graphql schema above?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null},{"__typename":"TextQuestion","slug":"questions/feedback","blurDuration":null,"focusDuration":null,"type":"TEXT","coverImage":null,"code":null,"title":"What did you think of the assessment?","description":null,"valueCodeLang":null,"defaultValue":null,"answer":null,"pointsPossible":null}]}}},"__N_SSP":true},"page":"/careers/assessments/[assessmentId]/take","query":{"assessmentId":"cl2byuinm001009ldx2gxaj1q"},"buildId":"_8_0wevUPJ2t0OdJLG6CI","isFallback":false,"gssp":true,"scriptLoader":[]}</script><script defer="">
"use strict";

!function() {
  var t = window.driftt = window.drift = window.driftt || [];
  if (!t.init) {
    if (t.invoked) return void (window.console && console.error && console.error("Drift snippet included twice."));
    t.invoked = !0, t.methods = [ "identify", "config", "track", "reset", "debug", "show", "ping", "page", "hide", "off", "on" ],
    t.factory = function(e) {
      return function() {
        var n = Array.prototype.slice.call(arguments);
        return n.unshift(e), t.push(n), t;
      };
    }, t.methods.forEach(function(e) {
      t[e] = t.factory(e);
    }), t.load = function(t) {
      var e = 3e5, n = Math.ceil(new Date() / e) * e, o = document.createElement("script");
      o.type = "text/javascript", o.async = !0, o.crossorigin = "anonymous", o.src = "https://js.driftt.com/include/" + n + "/" + t + ".js";
      var i = document.getElementsByTagName("script")[0];
      i.parentNode.insertBefore(o, i);
    };
  }
}();
drift.SNIPPET_VERSION = '0.3.1';
drift.load('k7s4y93b728f');
</script><script data-goatcounter="https://goatcounter.uplift.ltd/count" data-goatcounter-settings="{&quot;allow_local&quot;:false}" async="" src="https://goatcounter.uplift.ltd/count.js"></script><div><div class="grecaptcha-badge" data-style="bottomright" style="width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;"><div class="grecaptcha-logo"><iframe title="reCAPTCHA" src="https://www.google.com/recaptcha/api2/anchor?ar=2&amp;k=6LeMgG0aAAAAAKwnKMwuV4sVHKz3lRvpBSdL0z0Q&amp;co=aHR0cHM6Ly93d3cudXBsaWZ0Lmx0ZDo0NDM.&amp;hl=en&amp;v=QENb_qRrX0-mQMyENQjD6Fuj&amp;size=invisible&amp;cb=ogf1biioraqi" width="256" height="60" role="presentation" name="a-cxdtafui5587" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox"></iframe></div><div class="grecaptcha-error"></div><textarea id="g-recaptcha-response-100000" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div><iframe style="display: none;"></iframe></div><next-route-announcer><p aria-live="assertive" id="__next-route-announcer__" role="alert" style="border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1px; white-space: nowrap; overflow-wrap: normal;"></p></next-route-announcer><script src="/_next/static/chunks/pages/index-ca845296a22ee208.js"></script><script src="/_next/static/chunks/pages/%5B...slug%5D-d29f3b4226cbb8bd.js"></script><script src="/_next/static/chunks/pages/contact-us-75f44b188ba26e84.js"></script><script src="/_next/static/chunks/pages/blog-65d9d75a53c110c9.js"></script><div id="drift-frame-chat" class="drift-conductor-item drift-frame-chat drift-frame-chat-align-right" aria-hidden="true" tabindex="-1" style="right: 12px; width: 400px !important; max-width: none; position: fixed; z-index: 2147483647; max-height: 0px !important; bottom: 88px; visibility: hidden; min-width: 320px; height: calc(100% - 75px) !important; opacity: 0;"><iframe class="drift-frame-chat" scrolling="no" title="Drift Widget Chat Window" allow="autoplay; encrypted-media; fullscreen;" frameborder="0" src="https://js.driftt.com/core/chat?region=US&amp;driftEnableLog=false&amp;pageLoadStartTime=1651028328085" style="background: transparent; width: 400px !important; max-width: 100%; height: 100%; border: none;" aria-hidden="true" tabindex="-1"></iframe></div><div id="drift-frame-controller" class="drift-conductor-item drift-frame-controller drift-frame-controller-align-right" style="right: 24px; width: 76px !important; max-width: none; position: fixed; z-index: 2147483647; height: 76px !important; bottom: 24px;"><iframe class="drift-frame-controller" scrolling="no" title="Drift Widget Icon" allow="autoplay; encrypted-media; fullscreen;" frameborder="0" src="https://js.driftt.com/core?embedId=k7s4y93b728f&amp;region=US&amp;forceShow=false&amp;skipCampaigns=false&amp;sessionId=f3d0b350-1327-4206-b71c-30ff7f2dcca2&amp;sessionStarted=1650993073.678&amp;campaignRefreshToken=afedab6f-64f5-4c0b-b7f5-3f8a50b73854&amp;hideController=false&amp;pageLoadStartTime=1651028328085&amp;mode=CHAT&amp;driftEnableLog=false" style="background: transparent; width: 100%; max-width: 100%; height: 100%; border: none;"></iframe></div></body>
