import { useEffect } from 'react';

var BASE_FINCH_CONNECT_URI = 'https://connect.tryfinch.com';
var DEFAULT_FINCH_REDIRECT_URI = 'https://tryfinch.com';
var FINCH_CONNECT_IFRAME_ID = 'finch-connect-iframe';
var FINCH_AUTH_MESSAGE_NAME = 'finch-auth-message';

var noop = function noop() {}; // eslint-disable-next-line import/prefer-default-export


var useFinchConnect = function useFinchConnect() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var clientId = options.clientId,
      _options$products = options.products,
      products = _options$products === void 0 ? [] : _options$products,
      _options$mode = options.mode,
      mode = _options$mode === void 0 ? 'employer' : _options$mode,
      _options$manual = options.manual,
      manual = _options$manual === void 0 ? false : _options$manual,
      _options$payrollProvi = options.payrollProvider,
      payrollProvider = _options$payrollProvi === void 0 ? null : _options$payrollProvi,
      _options$onSuccess = options.onSuccess,
      onSuccess = _options$onSuccess === void 0 ? noop : _options$onSuccess,
      _options$onError = options.onError,
      onError = _options$onError === void 0 ? noop : _options$onError,
      _options$onClose = options.onClose,
      onClose = _options$onClose === void 0 ? noop : _options$onClose;

  var _constructAuthUrl = function _constructAuthUrl(clientId, products) {
    var authUrl = new URL("".concat(BASE_FINCH_CONNECT_URI, "/authorize"));
    if (clientId) authUrl.searchParams.append('client_id', clientId);
    if (payrollProvider) authUrl.searchParams.append('payroll_provider', payrollProvider);
    authUrl.searchParams.append('products', products.join(' '));
    authUrl.searchParams.append('app_type', 'spa');
    authUrl.searchParams.append('redirect_uri', DEFAULT_FINCH_REDIRECT_URI);
    authUrl.searchParams.append('mode', mode);
    if (manual) authUrl.searchParams.append('manual', manual);
    return authUrl.href;
  };

  var open = function open() {
    if (document.getElementById(FINCH_CONNECT_IFRAME_ID)) {
      return null;
    }

    var iframe = document.createElement('iframe');
    iframe.src = _constructAuthUrl(clientId, products);
    iframe.frameBorder = '0';
    iframe.id = FINCH_CONNECT_IFRAME_ID;
    iframe.style.position = 'fixed';
    iframe.style.zIndex = '999';
    iframe.style.height = '100%';
    iframe.style.width = '100%';
    iframe.style.top = '0';
    iframe.style.backgroundColor = 'none transparent';
    iframe.style.border = 'none';
    document.body.prepend(iframe);
    document.body.style.overflow = 'hidden';
  };

  var close = function close() {
    var frameToRemove = document.getElementById(FINCH_CONNECT_IFRAME_ID);

    if (frameToRemove) {
      frameToRemove.parentNode.removeChild(frameToRemove);
      document.body.style.overflow = 'inherit';
    }
  };

  useEffect(function () {
    function handleFinchAuth(event) {
      var handleFinchAuthSuccess = function handleFinchAuthSuccess(code) {
        return onSuccess({
          code: code
        });
      };

      var handleFinchAuthError = function handleFinchAuthError(error) {
        return onError({
          errorMessage: error
        });
      };

      var handleFinchAuthClose = function handleFinchAuthClose() {
        return onClose();
      };

      if (!event.data) return;
      if (event.data.name !== FINCH_AUTH_MESSAGE_NAME) return;
      if (!event.origin.startsWith(BASE_FINCH_CONNECT_URI)) return;
      var _event$data = event.data,
          code = _event$data.code,
          error = _event$data.error,
          closed = _event$data.closed;
      close();
      if (code) handleFinchAuthSuccess(code);else if (error) handleFinchAuthError(error);else if (closed) handleFinchAuthClose();
    }

    window.addEventListener('message', handleFinchAuth);
    return function () {
      return window.removeEventListener('message', handleFinchAuth);
    };
  }, [onClose, onError, onSuccess]);
  return {
    open: open
  };
};

export { useFinchConnect };
//# sourceMappingURL=index.es.js.map
